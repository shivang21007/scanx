#!/bin/bash

# Remove quarantine attributes
xattr -rd com.apple.quarantine /usr/local/bin/scanx 2>/dev/null || true

# Ad-hoc sign the binary
codesign --force --deep --sign - /usr/local/bin/scanx 2>/dev/null || true

# Check if osquery is installed first (check multiple common locations)
osquery_found=false

# Check PATH
if command -v osqueryi &> /dev/null; then
    osquery_found=true
fi

# Check common installation locations
if [ -f "/usr/local/bin/osqueryi" ] || [ -f "/opt/osquery/bin/osqueryi" ] || [ -f "/usr/bin/osqueryi" ]; then
    osquery_found=true
fi

# Check Homebrew location
if [ -f "/opt/homebrew/bin/osqueryi" ]; then
    osquery_found=true
fi

if [ "$osquery_found" = false ]; then
    osascript -e 'display dialog "‚ùå OSQuery not found!\n\nPlease install osquery first:\n  brew install osquery\n\nThen run this installer again." with title "scanx Setup Error" with icon stop buttons {"OK"} default button "OK"'
    exit 1
fi

# Configuration setup with GUI dialogs
# Note: If user cancels any dialog, installation will fail and require re-running
config_file="/etc/scanx/config/agent.conf"

# Get email from user
while true; do
    email=$(osascript -e 'text returned of (display dialog "üìß Enter employee email (required):" default answer "" with title "scanx Setup" with icon note)')
    
    # Check if user cancelled the dialog
    if [[ "$email" == "false" ]] || [[ -z "$email" ]]; then
        osascript -e 'display dialog "‚ùå Email is required for scanx setup.\n\nInstallation cancelled. Please run the installer again and provide a valid email address." with title "scanx Setup Cancelled" with icon stop buttons {"OK"} default button "OK"'
        exit 1
    fi
    
    # Validate email format
    if [[ "$email" == *"@"* ]]; then
        break
    else
        osascript -e 'display dialog "‚ùå Please enter a valid email address containing @ symbol" with title "scanx Setup" with icon stop buttons {"OK"} default button "OK"'
    fi
done

# Get interval from user (with default to 2 hours)
interval_choice=$(osascript -e 'choose from list {"5m (5 minutes)", "10m (10 minutes)", "15m (15 minutes)", "30m (30 minutes)", "1h (1 hour)", "2h (2 hours)", "4h (4 hours)", "6h (6 hours)", "8h (8 hours)", "12h (12 hours)", "24h (24 hours)"} with title "scanx Setup" with prompt "‚è±Ô∏è Select data collection interval:" default items {"2h (2 hours)"}')

# Check if user cancelled the interval selection
if [[ "$interval_choice" == "false" ]] || [[ -z "$interval_choice" ]]; then
    osascript -e 'display dialog "‚ùå Interval selection is required for scanx setup.\n\nInstallation cancelled. Please run the installer again and select a collection interval." with title "scanx Setup Cancelled" with icon stop buttons {"OK"} default button "OK"'
    exit 1
else
    interval=$(echo "$interval_choice" | cut -d' ' -f1)
fi

# Update configuration file
sed -i '' "s/\"user_email\": \"[^\"]*\"/\"user_email\": \"$email\"/" "$config_file"
sed -i '' "s/\"interval\": \"[^\"]*\"/\"interval\": \"$interval\"/" "$config_file"

# Show configuration confirmation
osascript -e "display dialog \"‚úÖ Configuration saved:\n\nüìß Email: $email\n‚è±Ô∏è Interval: $interval\nüë§ Service will run as: root (queries execute as current user)\n\nThe scanx will start automatically.\" with title \"scanx Setup Complete\" with icon note buttons {\"OK\"} default button \"OK\""

# Create directory structure and set permissions
mkdir -p /var/log/scanx
mkdir -p /var/lib/scanx
touch /var/log/scanx/scanx-std.log

# Set proper permissions for user access
chmod -R 777 /var/log/scanx
chmod -R 777 /var/lib/scanx
chmod 666 /var/log/scanx/scanx-std.log

# Ensure config directory is readable by the service user
chmod -R 777 /etc/scanx
chmod -R 777 /etc/scanx/config
chmod 644 /etc/scanx/config/agent.conf

# Ensure binary is executable by the service user
chmod -R 777 /usr/local/bin/scanx

# Verify permissions are correct
echo "üîç Verifying permissions..."
ls -la /usr/local/bin/scanx
ls -la /etc/scanx/config/
ls -la /var/log/scanx/

# Load and start the service
echo "üöÄ Starting scanx service..."
launchctl load /Library/LaunchDaemons/com.company.scanx.plist

# Wait a moment and verify service started
sleep 3
if launchctl list | grep -q "com.company.scanx"; then
    echo "‚úÖ scanx service started successfully!"
else
    echo "‚ö†Ô∏è  Service may not have started. Check logs:"
    echo "   tail -f /var/log/scanx/scanx-std.log"
fi

echo "scanx installed successfully with user configuration!"
echo "Email: $email"
echo "Interval: $interval"

exit 0
